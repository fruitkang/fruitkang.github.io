<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Others on 果汁康</title>
    <link>https://fruitkang.github.io/tags/others/</link>
    <description>Recent content in Others on 果汁康</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 20 Jun 2023 22:12:50 +0800</lastBuildDate>
    
	<atom:link href="https://fruitkang.github.io/tags/others/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>maven常用配置</title>
      <link>https://fruitkang.github.io/maven/maven%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 20 Jun 2023 22:12:50 +0800</pubDate>
      
      <guid>https://fruitkang.github.io/maven/maven%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</guid>
      <description> 1、配置阿里云镜像 &amp;lt;mirrors&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;aliyunmaven&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;阿里云公共仓库&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://maven.aliyun.com/repository/public&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;/mirrors&amp;gt;  2、配置1.8编译项目 &amp;lt;profiles&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;jdk-1.8&amp;lt;/id&amp;gt; &amp;lt;activation&amp;gt; &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt; &amp;lt;jdk&amp;gt;1.8&amp;lt;/jdk&amp;gt; &amp;lt;/activation&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;maven.compiler.source&amp;gt;1.8&amp;lt;/maven.compiler.source&amp;gt; &amp;lt;maven.compiler.target&amp;gt;1.8&amp;lt;/maven.compiler.target&amp;gt; &amp;lt;maven.compiler.compilerVersion&amp;gt;1.8&amp;lt;/maven.compiler.compilerVersion&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/profile&amp;gt; &amp;lt;/profiles&amp;gt;  3、maven排除继承父类的插件 &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;skip&amp;gt;true&amp;lt;/skip&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;  </description>
    </item>
    
    <item>
      <title>WebSocket</title>
      <link>https://fruitkang.github.io/others/websocket/</link>
      <pubDate>Mon, 20 Jun 2022 22:12:50 +0800</pubDate>
      
      <guid>https://fruitkang.github.io/others/websocket/</guid>
      <description> 1、WebSocket基本原理 WebSocket是一个允许在单一TCP连接上进行全双工消息通信的网络协议。
连接升级，将http连接升级为WebSocket连接。
一个客户端对应一个endPoint实例。
2、WebSocket生命周期 1、简介  与http技术不同，WebSocket具有生命周期。此生命周期由WebSocket协议进行支撑。在Servlet技术中，底层协议仅仅定义了请求/响应交互，这次的交互完全独立于下一次交互。然而在WebSocket协议定义了客户端与服务端间长时间存活的专用tcp连接。正因如此，在定义更长时间的生命周期方面，WebSocket比传统的web请求/响应模型更进一步。 WebSocket协议定义了WebSocket连接上往返传输数据各个块的格式。WebSocket协议中包含两种主要类型的帧：数据帧和控制帧。 控制帧用于执行协议内部功能逻辑的数据传输。例如，定义了关闭帧（close frame）。关闭帧是一种特殊的传输，它意味着发送者准备关闭连接。Ping帧和Pong帧是用来服务连接健康性检测的数据传输。如果WebSocket希望检测其到WebSocket对等节点的连接的健康性，它可以发送Ping帧。当WebSocket对等节点收到Ping帧后，必须响应Pong帧。  2、生命周期 API级别的生命周期
 打开事件 @OnOpen
 消息事件 @OnMessage
 错误事件 @OnEerror
 关闭事件 @OnClose
  3、端点实例数目及线程机制  java WebSocket编程模型与java Servlet 编程模型的关键差异在于，java Servlet实例可能被多个线程同时调用，每个线程用于处理不同客户端的请求/响应交互。然而，在WebSocket中，每个客户端都对应着一个端点实例，所以无需多线程处理。  3、配置与Session 1、简介 java WebSocket API中两个重要的对象：Session和EndpointConfig。
 session表示单个客户端的状态。
 EndpointConfig表示多个客户端共享的状态。
  </description>
    </item>
    
  </channel>
</rss>