<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on 果汁康</title>
    <link>https://fruitkang.github.io/tags/nginx/</link>
    <description>Recent content in Nginx on 果汁康</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 20 Jun 2022 22:12:50 +0800</lastBuildDate>
    
	<atom:link href="https://fruitkang.github.io/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx使用总结</title>
      <link>https://fruitkang.github.io/nginx/nginx%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 20 Jun 2022 22:12:50 +0800</pubDate>
      
      <guid>https://fruitkang.github.io/nginx/nginx%E9%85%8D%E7%BD%AE/</guid>
      <description>一、Nginx的作用 1.1、反向代理  简述   接受外部请求，然后把请求转发到后台服务器，然后将后台服务器的结果返回给客户端。
 1.2、负载均衡  简述   将前端的请求根据策略分发到不同的后端服务器进行处理
负载均衡策略
 轮询   依次将请求分配到不同的服务器，当某台服务器宕机之后，将自动去除该故障系统，用户访问不受影响。
  权重   将请求按照配置的权重分发到服务器，服务器之间的规格不同的情况。
  ip_hash   每个请求都按照请求IP地址进行hash运算并转发到对应服务器，可以保证同一个IP的用户请求能转发到同一台服务器。
  url_hash   按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率
注意：Nginx本身不支持url_hash，必须安装Nginx 的hash软件包
  fair   此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配
注意：Nginx本身不支持fair，必须下载Nginx的upstream_fair模块；
  1.3、动静分离  简述   在前后端项目中通常把前端项目部署到nginx中，前端对一些页面的请求只需要经过nginx就行，无需经过后台服务器。
动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，说白了就是把api请求接口通过反向代理把请求分配到对应的后台服务器上，静态资源(html,image,js,css)这些就由Nginx的静态资源服务器的功能来处理。
  举例  server { listen 80; server_name localhost; # 所有静态请求都由nginx处理，存放目录为html location /report { alias D:/nginx-1.</description>
    </item>
    
  </channel>
</rss>